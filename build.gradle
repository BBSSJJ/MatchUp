plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.3'
  id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.ssafy'

java {
  sourceCompatibility = '17'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-websocket'
  implementation 'org.springframework.kafka:spring-kafka'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.kafka:spring-kafka-test'
  // MapStruct
  implementation 'org.mapstruct:mapstruct:1.5.5.Final'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
  useJUnitPlatform()
}

import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors

tasks.register('loadEnvFile') {
  doLast {
    if (file('.env').exists()) {
      def env = Files.lines(Paths.get('.env'))
          .filter { line -> line =~ /^[A-Z_]+=.+$/ }
          .collect(Collectors.toList())
      env.each {
        def (key, value) = it.split('=')
        System.setProperty(key, value)
      }
    }
  }
}

tasks.withType(JavaExec).configureEach {
  dependsOn loadEnvFile
}

